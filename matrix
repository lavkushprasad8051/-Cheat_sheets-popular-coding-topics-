1   Search a 2D Matrix
 Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,50]], target = 3
Output: true



 bool searchMatrix(vector<vector<int>>& matrix, int target) {
      if (matrix.size()==0) return false;
		
        int row = 0;
        int col = size(matrix.front()) - 1;
		
        while (row < matrix.size() && col >= 0) {
            if (matrix[row][col] == target) {
                return true;
            }
            matrix[row][col] > target ? --col : ++row;
        }
        return false;
    }
    
    
2  Spirally traversing a matrix
R = 4, C = 4
matrix[][] = {{1, 2, 3, 4},
           {5, 6, 7, 8},
           {9, 10, 11, 12},
           {13, 14, 15,16}}
Output: 
1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10

  vector<int> spirallyTraverse(vector<vector<int> > matrix, int r, int c) 
    {
        // code here 
        vector<int>v;
        int cs=0,ce=r-1,rs=0,re=c-1;
        int direction=0;
        while(cs<=ce && rs<=re)
        {
            if(direction==0)
            {
                for(int i=rs;i<=re;i++)
                {
                    v.push_back(matrix[cs][i]);
                }
                cs++;
            }
            else if(direction==1)
            {
                for(int i=cs;i<=ce;i++)
                {
                    v.push_back(matrix[i][re]);
                }
                re--;
            }
            else if(direction==2)
            {
                for(int i=re;i>=rs;i--)
                {
                    v.push_back(matrix[ce][i]);
                }
                ce--;
            }
            else if(direction==3)
            {
                for(int i=ce;i>=cs;i--)
                {
                    v.push_back(matrix[i][rs]);
                }
                rs++;
            }
            direction=(direction+1)%4;
        }
       return v;
    }
    
    
    
    3  Median in a row-wise sorted Matrix
    
      int median(vector<vector<int>> &A, int r, int c){
        // code here    
        for(int i=r-1;i>0;i--){
    for(int j=0;j<c;j++) A[0].push_back(A[i][j]);
    A[i].clear();
}
sort(A[0].begin(),A[0].end());
return A[0][(A[0].size()/2)];
    }
    
    
    
4  Row with max 1s 
Input: 
N = 4 , M = 4
Arr[][] = {{0, 1, 1, 1},
           {0, 0, 1, 1},
           {1, 1, 1, 1},
           {0, 0, 0, 0}}
Output: 2
Explanation: Row 2 contains 4 1's (0-based
indexing).

https://www.youtube.com/watch?v=z092lX-nhik

int rowWithMax1s(vector<vector<int> > arr, int n, int m) {
	    // code here
	    int left=m-1,down=0;
	    int res=-1;
	    while(left>=0 && down<n)
	    {
	        if(arr[down][left]==1)
	        {
	            res=down;
	            left--;
	        }
	        else if(arr[down][left]==0)
	        {
	            down++;
	        }
	        
	    }
	    return res;
	}
 
 5  Maximal Rectangle
 Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.
   
   
   class Solution {
public:
   int largestRectangleArea(vector<int>& heights) {
        int n=heights.size();
        if(n==0)
        {
            return 0;
        }
        int left[n];
        int right[n];
        left[0]=-1;
        right[n-1]=n;
        for(int i=1;i<n;i++)
        {
            int p=i-1;
            while(p>=0 && heights[p]>=heights[i])
            {
                p=left[p];
            }
            left[i]=p;
        }
        for(int i=n-2;i>=0;i--)
        {
            int p=i+1;
            while(p<n && heights[p]>=heights[i])
            {
            p=right[p];    
            }
            right[i]=p;
        }
       int area=0;
        for(int i=0;i<n;i++)
        {
            area=max(area,heights[i]*(right[i]-left[i]-1));
        }
        return area;
    }
    int maximalRectangle(vector<vector<char>>& matrix) {
      if(matrix.empty()){
        return 0;
    }
    int maxRec = 0;
    vector<int> height(matrix[0].size(), 0);
    for(int i = 0; i < matrix.size(); i++){
        for(int j = 0; j < matrix[0].size(); j++){
            if(matrix[i][j] == '0'){
                height[j] = 0;
            }
            else{
                height[j]++;
            }
        }
        maxRec = max(maxRec, largestRectangleArea(height));
    }
    return maxRec;
    }
};

6 Rotate Image

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

   void rotate(vector<vector<int>>& matrix) {
         int n = matrix.size();
        
        //first we take transpose of the matrix
        for(int i = 0; i < n; ++i){
            for(int j = i; j < n; ++j){
                swap(matrix[i][j], matrix[j][i]);
            }
        }
        
        //then we take mirror image about the middle vertical line
        for(int i = 0; i < n; ++i){
            reverse(matrix[i].begin(), matrix[i].end());
        }
    }
    
    
    7 Common elements in all rows of a given matrix
    
    Input:
mat[4][5] = {{1, 2, 1, 4, 8},
             {3, 7, 8, 5, 1},
             {8, 7, 7, 3, 1},
             {8, 1, 2, 7, 9},
            };

Output: 
1 8 or 8 1
8 and 1 are present in all rows.

void printCommonElements(int mat[M][N]) 
{ 
    unordered_map<int, int> mp; 
  
    // initalize 1st row elements with value 1 
    for (int j = 0; j < N; j++) 
        mp[mat[0][j]] = 1; 
  
    // traverse the matrix 
    for (int i = 1; i < M; i++) 
    { 
        for (int j = 0; j < N; j++) 
        { 
            // If element is present in the map and 
            // is not duplicated in current row. 
            if (mp[mat[i][j]] == i) 
            { 
               // we increment count of the element 
               // in map by 1 
                mp[mat[i][j]] = i + 1; 
  
                // If this is last row 
                if (i==M-1) 
                  cout << mat[i][j] << " "; 
            } 
        } 
    } 
} 
  
