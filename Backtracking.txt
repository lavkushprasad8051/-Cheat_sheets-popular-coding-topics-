----------------------------------------------------------------------Backtracking--------------------------------------------------------------------------------

Que1:Combinations

/*Given two integers n and k, return all possible combinations of k numbers out of 1 2 3 ... n.

Make sure the combinations are sorted.
Within every entry, elements should be sorted. [1, 4] is a valid entry while [4, 1] is not.
Entries should be sorted within themselves.
Example :
If n = 4 and k = 2, a solution is:

[
  [1,2],
  [1,3],
  [1,4],
  [2,3],
  [2,4],
  [3,4],
]
*/

void solve(int idx,int n,int k,vector<int>&row,vector<vector<int> >&res){
    if(k<=0){
        res.push_back(row);
        return;
    }
    for(int i=idx;i<=n;i++){
        row.emplace_back(i);
        solve(i+1,n,k-1,row,res);
        row.pop_back();
    }
}

vector<vector<int> > Solution::combine(int A, int B) {
    vector<vector<int> >res;
    vector<int>row;
    solve(1,A,B,row,res);
    return res;
}

Que2:Permutations

void solve(int i,vector<vector<int> >&res,vector<int>&A){
    if(i==A.size()){
        res.push_back(A);
        return;
    }
    if(i>A.size()) return;
    for(int j=i;j<A.size();j++){
        swap(A[j],A[i]);
        solve(i+1,res,A);
        swap(A[j],A[i]);
    }
}

vector<vector<int> > Solution::permute(vector<int> &A) {
    vector<vector<int> >res;
    solve(0,res,A);
    return res;
}

Que3:Kth permutation sequence

void solve(int start,int &n,string &temp,vector<string> &res){
    if(start==n){
        res.push_back(temp);
        return;
    }
    if(start>n) return;
    for(int i=start;i<n;i++){
        swap(temp[i],temp[start]);
        solve(start+1,n,temp,res);
        swap(temp[start],temp[i]);
    }
}
string Solution::getPermutation(int n, int k) {
    vector<string>res;
    string temp;
    for(int i=1;i<=n;i++) temp+=to_string(i);
    solve(0,n,temp,res);
    return res[k-1];
}

Que3: Palindrome partitioning

class Solution {
public:
    bool palin(string s)
    {
       int l=0;
        int r=s.length()-1;
            while(l<=r)
            {
                if(s[l++]!=s[r--])
                {
                    return false;
                }
            }
        return true;
    }
    void pal(string  s, vector<string>&tmp, vector<vector<string >>&v)
    {
        if(s.length()==0)
        {
            v.push_back(tmp);
            return ;
        }
        for(int i=0;i<s.length();i++)
        {
            string l=s.substr(0,i+1);
            if(palin(l))
            {
                tmp.push_back(l);
                pal(s.substr(i+1),tmp,v);
                tmp.pop_back();
            }
        }
        
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string >>v;
        vector<string>tmp;
        pal(s,tmp,v);
        return v;
    }
};
Que4:Subset generation

*/Given a set of distinct integers, S, return all possible subsets.

 Note:
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
Also, the subsets should be sorted in ascending ( lexicographic ) order.
The list is not necessarily sorted.
Example :

If S = [1,2,3], a solution is:

[
  [],
  [1],
  [1, 2],
  [1, 2, 3],
  [1, 3],
  [2],
  [2, 3],
  [3],
]*/

class Solution {
public:
    void dfs(vector<int>& nums, vector<int>& ans, vector<vector<int>>& res, int start) {
        res.push_back(ans);
        for (int i = start; i < nums.size(); i++) {
          
            ans.push_back(nums[i]);
            dfs(nums, ans, res, i + 1);
            ans.pop_back();
        }
    }
    
    vector<vector<int>> subsets(vector<int>& nums) {
         vector<int> ans;
        vector<vector<int>> res;
        sort(nums.begin(), nums.end());
        dfs(nums, ans, res, 0);
        return res;
    }
};

Que5:Subset2

/*Given a collection of integers that might contain duplicates, S, return all possible subsets.

 Note:
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
The subsets must be sorted lexicographically.
Example :
If S = [1,2,2], the solution is:

[
[],
[1],
[1,2],
[1,2,2],
[2],
[2, 2]
]*/

class Solution {
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<int> ans;
        vector<vector<int>> res;
        sort(nums.begin(), nums.end());
        dfs(nums, ans, res, 0);
        return res;
    }
    void dfs(vector<int>& nums, vector<int> & ans,vector<vector<int>> &res,int start)
    {
        res.push_back(ans);
        for(int i=start;i<nums.size();i++)
        {
            if(i>start &&  nums[i]==nums[i-1]) continue;
            ans.push_back(nums[i]);
            dfs(nums,ans,res,i+1);
            ans.pop_back();
        }
    }
};

Que6: Sudoku

bool isvalid(vector<vector<char> >&A,int row,int col,char x){
    int box_start_row=row-row%3;
    int box_start_col=col-col%3;
    for(int i=0;i<9;i++){
        if(A[i][col]==x) return false;
    }
    
    for(int i=0;i<9;i++){
        if(A[row][i]==x) return false;
    }
    
    for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            if(A[i+box_start_row][j+box_start_col]==x) return false;
        }
    }
    return true;
}


bool solve(vector<vector<char> >&A,int row,int col){
    if(row==9) return true;
    if(col==9) return solve(A,row+1,0);   // Move to next row if this is the last column
    if(A[row][col]!='.')          // If already assigned,don't assign it
        return solve(A,row,col+1);
    for(char i='1';i<='9';i++){
        if(isvalid(A,row,col,i)){
        A[row][col]=i;
        if(solve(A,row,col+1)) 
        return true;
        A[row][col]='.';
        }
    }
    return false;
}

void Solution::solveSudoku(vector<vector<char> > &A) {
    solve(A,0,0);
}

Que 7:Combination sum1

/*Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

 Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The combinations themselves must be sorted in ascending order.
CombinationA > CombinationB iff (a1 > b1) OR (a1 = b1 AND a2 > b2) OR … (a1 = b1 AND a2 = b2 AND … ai = bi AND ai+1 > bi+1)
The solution set must not contain duplicate combinations.
Example,
Given candidate set 2,3,6,7 and target 7,
A solution set is:
[2, 2, 3]
[7]
*/
void solve(vector<int>&A,int B,vector<int>&row,vector<vector<int>>&res,int i){
    if(B==0){
        res.push_back(row);
        return;
    }
    if(i==A.size() || B<0)
    return;
    row.push_back(A[i]);
    solve(A,B-A[i],row,res,i);
    row.pop_back();
    solve(A,B,row,res,i+1);
}

vector<vector<int> > Solution::combinationSum(vector<int> &A, int B) {
    vector<vector<int> >res;
    vector<int>row,a;
    sort(A.begin(),A.end());
    a.push_back(A[0]);
    for(int i=1;i<A.size();i++){
        if(A[i-1]!=a[a.size()-1]);
        a.push_back(A[i]);
    }
    solve(a,B,row,res,0);
    res.erase(unique(res.begin(),res.end()),res.end());
    sort(res.begin(),res.end());
    return res;
}

Que 8: Combination sum2

Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used ONCE in the combination.

 Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
Example :

Given candidate set 10,1,2,7,6,1,5 and target 8,

A solution set is:

[1, 7]
[1, 2, 5]
[2, 6]
[1, 1, 6]


void solve(int i, vector<int> row, vector<vector<int> >& res, vector<int> A, int B)
{
    if(B<0) 
    return;
    if (B==0){
        sort(row.begin(),row.end());
        res.push_back(row);
        return;
    }
    if(i>=A.size())
    return;
    row.push_back(A[i]);
    solve(i+1,row,res,A,B-A[i]);
    row.pop_back();
    solve(i+1,row,res,A,B);
}

vector<vector<int> > Solution::combinationSum(vector<int> &A, int B) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details

    vector<vector<int> > res;
    sort(A.begin(), A.end());
    solve(0, vector<int>(), res, A, B);
    res.erase(unique(res.begin(),res.end()),res.end());
    return res;
}

Que 9: Nqueens

bool issafe(vector<string>&temp,int row,int col,int n){
    for(int i=0;i<col;i++){
        if(temp[row][i]=='Q') 
        return false;
    }
    for(int i=row,j=col;i>=0 && j>=0;i--,j--){
        if(temp[i][j]=='Q') 
        return false;
    }
    for(int i=row,j=col;i<n && j>=0;i++,j--){
        if(temp[i][j]=='Q') 
        return false;
    }
    return true;
} 

void solve(int col,vector<vector<string>>&res,vector<string>&temp,int n){
    if(col==n){
        res.push_back(temp);
        return;
    }
    for(int row=0;row<n;row++){
        if(issafe(temp,row,col,n)){
            temp[row][col]='Q';
            solve(col+1,res,temp,n);
            temp[row][col]='.';
        }
    }
}

vector<vector<string> > Solution::solveNQueens(int A) {
    vector<vector<string> >res;
    if(A==2 || A==3) return res;
    string s(A,'.');
    vector<string>temp(A,s);
    solve(0,res,temp,A);
    return res;
}

Que 10: Generate all parenthesis

/*Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses of length 2*n.

For example, given n = 3, a solution set is:

"((()))", "(()())", "(())()", "()(())", "()()()" */

bool isvalid(string str){
    stack<int>stk;
    for(int i=0;i<str.size();i++) {
        if(str[i]=='(')
        stk.push('(');
        if(str[i]==')'){
            if(stk.empty())
            return false;
            stk.pop();
        }
    }
    if(stk.empty()) return true;
    return false;
}

void solve(int i,int A,string &temp,vector<string>&res){
    if(i==A){
        if(isvalid(temp))
        res.push_back(temp);
        return;
    }
    if(i>A) return;
    temp+='(';
    solve(i+1,A,temp,res);
    temp.pop_back();
    temp+=')';
    solve(i+1,A,temp,res);
    temp.pop_back();
}

vector<string> Solution::generateParenthesis(int A) {
    vector<string>res;
    string temp="";
    solve(0,2*A,temp,res);
    return res;
}


or 



class Solution {
public:
    vector<string> generateParenthesis(int n) {
     vector<string>v;
        int close=n;
        int open=n;
        string op="";
        solve(open,close,op,v);
        return v;
    }
    void solve(int open,int close,string op,vector<string>&v)
    {
        if(open==0 && close==0)
        {
            v.push_back(op);
            return;
        }
        if(open!=0)
        {
           
            solve(open-1,close,op+'(',v);
        }
        if(close>open)
        {
          
            solve(open,close-1,op+')',v);
        }
        return;
    }
};
